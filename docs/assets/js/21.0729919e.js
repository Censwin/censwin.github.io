(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{531:function(t,e,r){"use strict";r.r(e);var n=r(6),v=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("第一步：创建 XMLHttpRequest 对象。")]),t._v(" "),r("p",[t._v("第二步：为 xhr 对象注册回调函数。")]),t._v(" "),r("p",[t._v("XMLHttpRequest 的回调函数主要有下面几种：")]),t._v(" "),r("ul",[r("li",[t._v("ontimeout，用来监控超时请求，如果后台请求超时了，该函数会被调用；")]),t._v(" "),r("li",[t._v("onerror，用来监控出错信息，如果后台请求出错了，该函数会被调用；")]),t._v(" "),r("li",[t._v("onreadystatechange，用来监控后台请求过程中的状态，比如可以监控到 HTTP 头加载完成的消息、HTTP 响应体消息以及数据加载完成的消息等。")])]),t._v(" "),r("p",[t._v("第三步：配置基础的请求信息。")]),t._v(" "),r("p",[t._v("第四步：发起请求。")]),t._v(" "),r("p",[t._v("渲染进程会将请求发送给网络进程，然后网络进程负责资源的下载，等网络进程接收到数据之后，就会利用 IPC 来通知渲染进程；渲染进程接收到消息之后，会将 xhr 的回调函数封装成任务并添加到消息队列中，等主线程循环系统执行到该任务的时候，就会根据相关的状态来调用对应的回调函数。")]),t._v(" "),r("ul",[r("li",[t._v("如果网络请求出错了，就会执行 xhr.onerror；")]),t._v(" "),r("li",[t._v("如果超时了，就会执行 xhr.ontimeout；")]),t._v(" "),r("li",[t._v("如果是正常的数据接收，就会执行 onreadystatechange 来反馈相应的状态。\n"),r("img",{attrs:{src:t.$withBase("/brower/xmlrequest.png")}})])])])}),[],!1,null,null,null);e.default=v.exports}}]);