(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{529:function(t,e,v){"use strict";v.r(e);var _=v(6),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("本篇及说一下老生常谈的问题当用户按下回车到底发生了什么，首先是导航流程")]),t._v(" "),v("h2",{attrs:{id:"用户输入-【浏览器进程】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用户输入-【浏览器进程】"}},[t._v("#")]),t._v(" 用户输入 【浏览器进程】")]),t._v(" "),v("p",[t._v("当用户在地址栏中输入文字时会被【浏览器进程】接收，如果是搜索内容的话就会直接生成一个带关键字的URL；如果搜索的内容是符合URL规则的话，那么就会给这段内容加上一个协议标准如：http/https")]),t._v(" "),v("p",[t._v("beforeunload：当用户按下回车后意味着要进入下一个阶段，但在此之前浏览器会执行 beforeunload 事件，在这个事件中我们可以做一些清楚数据或者提醒用户将要离开当前页面的提示；")]),t._v(" "),v("h2",{attrs:{id:"url-请求阶段-【网络进程】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#url-请求阶段-【网络进程】"}},[t._v("#")]),t._v(" URL 请求阶段 【网络进程】")]),t._v(" "),v("p",[t._v("此时，浏览器进程 会通过 "),v("em",[t._v("进程间通信（IPC）")]),t._v(" 将URL交给网络进程，网络进程接收到URL请求后正式进入请求流程。")]),t._v(" "),v("p",[t._v("首先 网络进程 会查找本地资源，如果有缓存资源的话就直接返回给 浏览器进程； 如果没有查找到资源则进入网络请求。首先第一步是进行DNS解析获取IP地址，如果是https的话还需要建立TLS连接。")]),t._v(" "),v("p",[t._v("而后建立TCP连接，建立好TCP连接后如上一章所示，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。")]),t._v(" "),v("p",[t._v("当网络进程接收到响应数据后，则开始解析相应头，如果发现状态码是301或302则会从相应头Location字段中取出重定向地址再发起新的请求。")]),t._v(" "),v("p",[v("strong",[t._v("响应类型处理")])]),t._v(" "),v("p",[t._v("响应头中有一个非常重要的字段叫 "),v("code",[t._v("Content-Type")]),t._v(" ，这个字段将告诉浏览器返回的响应体是什么类型，从而决定处理方式。如 "),v("code",[t._v("Content-type:text/html")]),t._v(" 为HTML、"),v("code",[t._v("Content-type:application/octet-stream")]),t._v(" 为 下载；")]),t._v(" "),v("p",[t._v("如果类型为 "),v("code",[t._v("application/octet-stream")]),t._v(" 那么该请求会被提交给浏览器的下载管理器，"),v("u",[v("strong",[t._v("同时该 URL 请求的导航流程就此结束")])]),t._v("。但如果是 HTML，那么浏览器则会继续进行导航流程。由于 Chrome 的页面渲染是运行在渲染进程中的，所以接下来就需要准备渲染进程了。")]),t._v(" "),v("h2",{attrs:{id:"准备渲染-【浏览器进程】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#准备渲染-【浏览器进程】"}},[t._v("#")]),t._v(" 准备渲染 【浏览器进程】")]),t._v(" "),v("p",[t._v("默认情况下，Chrome 会为每个页面分配一个渲染进程，但如果是"),v("strong",[t._v("相同站点")]),t._v("的话那么新页面会"),v("u",[t._v("复用父页面的渲染进程")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"交作业-【渲染进程】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#交作业-【渲染进程】"}},[t._v("#")]),t._v(" 交作业 【渲染进程】")]),t._v(" "),v("p",[t._v("渲染进程创建后会和网络进程建立传输管道，将文档数据传输给渲染进程。数据传输成功后 渲染进程 会通知浏览器进程；浏览器进程在收到消息后，会更新浏览器界面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新 Web 页面。（此时页面呈现加载动画，web页面还未完全渲染）")])])}),[],!1,null,null,null);e.default=a.exports}}]);